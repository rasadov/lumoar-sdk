/* tslint:disable */
/* eslint-disable */
/**
 * Lumoar API
 * Compliance as a service
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { DefaultApi } from './api';


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = {
            ...param.baseOptions,
            headers: {
                ...param.baseOptions?.headers,
            },
        };
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}


export class ApiSDK {
    private api: DefaultApi;
    private token: string | null = null;
    private axiosInstance: AxiosInstance;

    constructor(basePath?: string) {
        this.axiosInstance = axios.create({ 
          baseURL: basePath,
          withCredentials: true  // Include cookies (e.g., session_id) in requests
        });
        this.setupInterceptors();
        const config = new Configuration({
          basePath,
          apiKey: () => this.getAuthHeader(),
          baseOptions: { 
            axios: this.axiosInstance  // Ensure generated API uses this instance
          },
        });
        this.api = new DefaultApi(config, undefined, this.axiosInstance);  // Pass axiosInstance explicitly
      }

    // Set or update token
    public setToken(newToken: string) {
      this.token = newToken;
    }
  
    // Get auth header
    private getAuthHeader(): string {
      if (!this.token) {
        throw new Error('No token set. Call setToken() first.');
      }
      return `Bearer ${this.token}`;
    }
  
    // Setup interceptors for requests and responses
    private setupInterceptors() {
    // Request interceptor: Always set latest token
    this.axiosInstance.interceptors.request.use((config) => {
        if (this.token) {
        config.headers['Authorization'] = this.getAuthHeader();
        }
        return config;
    });
    
    this.axiosInstance.interceptors.response.use((response: AxiosResponse) => {
        const newToken = response.data.newToken || response.headers['Authorization'];
        if (newToken) {
        this.setToken(newToken.replace('Bearer ', ''));
        console.log('Token automatically updated via backend refresh');
        }
        return response;
    }, (error) => {
        if (error.response?.status === 401) {
        console.error('Authentication failed - session expired');
        // TODO: emit event or callback to app for login redirect
        }
        return Promise.reject(error);
    });
    }

    // Expose API methods (proxies the generated API)
    public getApi() {
      return this.api;
    }
  }